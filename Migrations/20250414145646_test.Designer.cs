// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProfesionalesAPI.Dto;

#nullable disable

namespace ProfesionalesAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250414145646_test")]
    partial class test
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProfesionalesAPI.Dto.Archivos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreArchivo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ruta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoDocumento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoEntidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Archivos");
                });

            modelBuilder.Entity("ProfesionalesAPI.Dto.Bitacora", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Actividades")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("HorasTrabajadas")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OfertaId")
                        .HasColumnType("int");

                    b.Property<int>("PracticaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfertaId");

                    b.HasIndex("PracticaId");

                    b.ToTable("Bitacoras");
                });

            modelBuilder.Entity("ProfesionalesAPI.Dto.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ciudad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreComercial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreLegal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pais")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provincia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Representante")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ruc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("usuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("usuarioId");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("ProfesionalesAPI.Dto.Convenio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstitucionlId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("InstitucionlId");

                    b.ToTable("Convenios");
                });

            modelBuilder.Entity("ProfesionalesAPI.Dto.DocentePeriodo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DocenteId")
                        .HasColumnType("int");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PeriodoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocenteId");

                    b.HasIndex("PeriodoId");

                    b.ToTable("docentePeriodos");
                });

            modelBuilder.Entity("ProfesionalesAPI.Dto.EstudiantePeriodo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<int?>("EstudianteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PeriodoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstudianteId");

                    b.HasIndex("PeriodoId");

                    b.ToTable("estudiantePeriodos");
                });

            modelBuilder.Entity("ProfesionalesAPI.Dto.Evaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Calificacion")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Comentarios")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocenteId")
                        .HasColumnType("int");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OfertaId")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("postulacionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocenteId");

                    b.HasIndex("OfertaId");

                    b.HasIndex("postulacionId");

                    b.ToTable("Evaluaciones");
                });

            modelBuilder.Entity("ProfesionalesAPI.Dto.Institucion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ciudad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pais")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provincia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RUC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Instituciones");
                });

            modelBuilder.Entity("ProfesionalesAPI.Dto.Oferta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Actividades")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Vacantes")
                        .HasColumnType("int");

                    b.Property<int?>("institucionId")
                        .HasColumnType("int");

                    b.Property<int?>("periodoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("institucionId");

                    b.HasIndex("periodoId");

                    b.ToTable("Ofertas");
                });

            modelBuilder.Entity("ProfesionalesAPI.Dto.Periodo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstitucionId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InstitucionId");

                    b.ToTable("Periodos");
                });

            modelBuilder.Entity("ProfesionalesAPI.Dto.Postulacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DocenteId")
                        .HasColumnType("int");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<int?>("EstudianteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OfertaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocenteId");

                    b.HasIndex("EstudianteId");

                    b.HasIndex("OfertaId");

                    b.ToTable("Postulaciones");
                });

            modelBuilder.Entity("ProfesionalesAPI.Dto.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ProfesionalesAPI.Dto.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellidos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BloqueoHasta")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ciudad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Identificacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InstitucionId")
                        .HasColumnType("int");

                    b.Property<int>("IntentosFallidos")
                        .HasColumnType("int");

                    b.Property<string>("Nombres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("RolId")
                        .HasColumnType("int");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UltimoCambioPassword")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InstitucionId");

                    b.HasIndex("RolId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("ProfesionalesAPI.Dto.Bitacora", b =>
                {
                    b.HasOne("ProfesionalesAPI.Dto.Oferta", null)
                        .WithMany("Bitacoras")
                        .HasForeignKey("OfertaId");

                    b.HasOne("ProfesionalesAPI.Dto.Postulacion", "Practica")
                        .WithMany("Bitacoras")
                        .HasForeignKey("PracticaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Practica");
                });

            modelBuilder.Entity("ProfesionalesAPI.Dto.Company", b =>
                {
                    b.HasOne("ProfesionalesAPI.Dto.Usuario", "user")
                        .WithMany()
                        .HasForeignKey("usuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("ProfesionalesAPI.Dto.Convenio", b =>
                {
                    b.HasOne("ProfesionalesAPI.Dto.Company", "Empresa")
                        .WithMany("Convenios")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfesionalesAPI.Dto.Institucion", "Institucion")
                        .WithMany("Convenios")
                        .HasForeignKey("InstitucionlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("Institucion");
                });

            modelBuilder.Entity("ProfesionalesAPI.Dto.DocentePeriodo", b =>
                {
                    b.HasOne("ProfesionalesAPI.Dto.Usuario", "Docente")
                        .WithMany("Docentes")
                        .HasForeignKey("DocenteId");

                    b.HasOne("ProfesionalesAPI.Dto.Periodo", "Periodo")
                        .WithMany("Docentes")
                        .HasForeignKey("PeriodoId");

                    b.Navigation("Docente");

                    b.Navigation("Periodo");
                });

            modelBuilder.Entity("ProfesionalesAPI.Dto.EstudiantePeriodo", b =>
                {
                    b.HasOne("ProfesionalesAPI.Dto.Usuario", "Estudiante")
                        .WithMany("Estudiantes")
                        .HasForeignKey("EstudianteId");

                    b.HasOne("ProfesionalesAPI.Dto.Periodo", "Periodo")
                        .WithMany("Estudiantes")
                        .HasForeignKey("PeriodoId");

                    b.Navigation("Estudiante");

                    b.Navigation("Periodo");
                });

            modelBuilder.Entity("ProfesionalesAPI.Dto.Evaluation", b =>
                {
                    b.HasOne("ProfesionalesAPI.Dto.Usuario", "Docente")
                        .WithMany()
                        .HasForeignKey("DocenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfesionalesAPI.Dto.Oferta", null)
                        .WithMany("Evaluaciones")
                        .HasForeignKey("OfertaId");

                    b.HasOne("ProfesionalesAPI.Dto.Postulacion", "Postulacion")
                        .WithMany("Evaluaciones")
                        .HasForeignKey("postulacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Docente");

                    b.Navigation("Postulacion");
                });

            modelBuilder.Entity("ProfesionalesAPI.Dto.Oferta", b =>
                {
                    b.HasOne("ProfesionalesAPI.Dto.Company", null)
                        .WithMany("Ofertas")
                        .HasForeignKey("CompanyId");

                    b.HasOne("ProfesionalesAPI.Dto.Institucion", "Institucion")
                        .WithMany()
                        .HasForeignKey("institucionId");

                    b.HasOne("ProfesionalesAPI.Dto.Periodo", "Periodo")
                        .WithMany("Ofertas")
                        .HasForeignKey("periodoId");

                    b.Navigation("Institucion");

                    b.Navigation("Periodo");
                });

            modelBuilder.Entity("ProfesionalesAPI.Dto.Periodo", b =>
                {
                    b.HasOne("ProfesionalesAPI.Dto.Institucion", "Institucion")
                        .WithMany("Periodos")
                        .HasForeignKey("InstitucionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institucion");
                });

            modelBuilder.Entity("ProfesionalesAPI.Dto.Postulacion", b =>
                {
                    b.HasOne("ProfesionalesAPI.Dto.DocentePeriodo", "Docente")
                        .WithMany("Postulaciones")
                        .HasForeignKey("DocenteId");

                    b.HasOne("ProfesionalesAPI.Dto.EstudiantePeriodo", "Estudiante")
                        .WithMany("Postulaciones")
                        .HasForeignKey("EstudianteId");

                    b.HasOne("ProfesionalesAPI.Dto.Oferta", "Oferta")
                        .WithMany("Postulaciones")
                        .HasForeignKey("OfertaId");

                    b.Navigation("Docente");

                    b.Navigation("Estudiante");

                    b.Navigation("Oferta");
                });

            modelBuilder.Entity("ProfesionalesAPI.Dto.Usuario", b =>
                {
                    b.HasOne("ProfesionalesAPI.Dto.Institucion", "Institucion")
                        .WithMany("Users")
                        .HasForeignKey("InstitucionId");

                    b.HasOne("ProfesionalesAPI.Dto.Role", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("RolId");

                    b.HasOne("ProfesionalesAPI.Dto.Usuario", null)
                        .WithMany("Usuarios")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Institucion");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("ProfesionalesAPI.Dto.Company", b =>
                {
                    b.Navigation("Convenios");

                    b.Navigation("Ofertas");
                });

            modelBuilder.Entity("ProfesionalesAPI.Dto.DocentePeriodo", b =>
                {
                    b.Navigation("Postulaciones");
                });

            modelBuilder.Entity("ProfesionalesAPI.Dto.EstudiantePeriodo", b =>
                {
                    b.Navigation("Postulaciones");
                });

            modelBuilder.Entity("ProfesionalesAPI.Dto.Institucion", b =>
                {
                    b.Navigation("Convenios");

                    b.Navigation("Periodos");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ProfesionalesAPI.Dto.Oferta", b =>
                {
                    b.Navigation("Bitacoras");

                    b.Navigation("Evaluaciones");

                    b.Navigation("Postulaciones");
                });

            modelBuilder.Entity("ProfesionalesAPI.Dto.Periodo", b =>
                {
                    b.Navigation("Docentes");

                    b.Navigation("Estudiantes");

                    b.Navigation("Ofertas");
                });

            modelBuilder.Entity("ProfesionalesAPI.Dto.Postulacion", b =>
                {
                    b.Navigation("Bitacoras");

                    b.Navigation("Evaluaciones");
                });

            modelBuilder.Entity("ProfesionalesAPI.Dto.Role", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("ProfesionalesAPI.Dto.Usuario", b =>
                {
                    b.Navigation("Docentes");

                    b.Navigation("Estudiantes");

                    b.Navigation("Usuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
